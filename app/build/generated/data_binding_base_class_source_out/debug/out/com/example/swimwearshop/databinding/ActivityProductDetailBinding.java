// Generated by view binder compiler. Do not edit!
package com.example.swimwearshop.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.swimwearshop.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityProductDetailBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button addToCartButton;

  @NonNull
  public final Button deleteButton;

  @NonNull
  public final ImageView productImage;

  @NonNull
  public final EditText productName;

  @NonNull
  public final TextView productNameLabel;

  @NonNull
  public final TextView productPrice;

  @NonNull
  public final Button updateButton;

  private ActivityProductDetailBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button addToCartButton, @NonNull Button deleteButton,
      @NonNull ImageView productImage, @NonNull EditText productName,
      @NonNull TextView productNameLabel, @NonNull TextView productPrice,
      @NonNull Button updateButton) {
    this.rootView = rootView;
    this.addToCartButton = addToCartButton;
    this.deleteButton = deleteButton;
    this.productImage = productImage;
    this.productName = productName;
    this.productNameLabel = productNameLabel;
    this.productPrice = productPrice;
    this.updateButton = updateButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityProductDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityProductDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_product_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityProductDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addToCartButton;
      Button addToCartButton = ViewBindings.findChildViewById(rootView, id);
      if (addToCartButton == null) {
        break missingId;
      }

      id = R.id.deleteButton;
      Button deleteButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteButton == null) {
        break missingId;
      }

      id = R.id.productImage;
      ImageView productImage = ViewBindings.findChildViewById(rootView, id);
      if (productImage == null) {
        break missingId;
      }

      id = R.id.productName;
      EditText productName = ViewBindings.findChildViewById(rootView, id);
      if (productName == null) {
        break missingId;
      }

      id = R.id.productNameLabel;
      TextView productNameLabel = ViewBindings.findChildViewById(rootView, id);
      if (productNameLabel == null) {
        break missingId;
      }

      id = R.id.productPrice;
      TextView productPrice = ViewBindings.findChildViewById(rootView, id);
      if (productPrice == null) {
        break missingId;
      }

      id = R.id.updateButton;
      Button updateButton = ViewBindings.findChildViewById(rootView, id);
      if (updateButton == null) {
        break missingId;
      }

      return new ActivityProductDetailBinding((ConstraintLayout) rootView, addToCartButton,
          deleteButton, productImage, productName, productNameLabel, productPrice, updateButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
